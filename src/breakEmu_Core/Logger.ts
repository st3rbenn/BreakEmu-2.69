import * as PinoLogger from "pino"
import { ansiColorCodes } from "./Colors"

class Logger {
	private logger: PinoLogger.Logger
	private totalParameters: number = 0
	private loadedParameters: number = 0

	constructor(msgPrefix: string = "breakEmu") {
		this.logger = PinoLogger.default({
			timestamp: false,
			base: undefined,
			msgPrefix: `[${msgPrefix}]: `,
			transport: {
				target: "pino-pretty",
			},
		})
	}

	public newLine(): void {
		this.supressLoggerLevel("")
	}

	private Colorize(msg: string, color: string): string {
		return `${color ? color : ansiColorCodes.bright}${msg}\x1b[0m`
	}

	public error(msg: string): void {
		this.logger.error(msg)
	}

	public warn(msg: string): void {
		this.logger.warn(msg)
	}

	public write(message: string, color?: string): void {
		if (color) {
			this.logger.info(this.Colorize(message, color))
		} else {
			this.logger.info(message)
		}
	}

	private async supressLoggerLevel(msg: string, color?: string): Promise<void> {
    this.write(`\r\x1b[K${msg}`, color) // Assuming this.write is your existing synchronous method
	}

	public async writeAsync(message: string, color?: string): Promise<void> {
    if (color) {
			this.logger.info(this.Colorize(message, color))
		} else {
			this.logger.info(message)
		}
	}

	public async logo(): Promise<void> {
		this.newLine()
		try {
			await this.supressLoggerLevel(
				" ‚ñÑ‚ñÑ‚ñÑ‚ñÑ    ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà ‚ñÑ‚ñà‚ñÄ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñà‚ñà‚ñÑ‚ñà‚ñí ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñà‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñí‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà‚ñà‚ñÑ‚ñë ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ  ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñì‚ñà  ‚ñÑ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñì‚ñà‚ñà ‚ñà‚ñÑ ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñì‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñà‚ñÑ         Written by Sterben with ü•êüç∑",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñí‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñí ‚ñí‚ñí ‚ñì‚ñí",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"‚ñí‚ñë‚ñí   ‚ñë   ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñë ‚ñë  ‚ñë ‚ñí   ‚ñí‚ñí ‚ñë‚ñë ‚ñë‚ñí ‚ñí‚ñë",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				" ‚ñë    ‚ñë   ‚ñë‚ñë   ‚ñë    ‚ñë    ‚ñë   ‚ñí   ‚ñë ‚ñë‚ñë ‚ñë ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				" ‚ñë         ‚ñë        ‚ñë  ‚ñë     ‚ñë  ‚ñë‚ñë  ‚ñë   ",
				ansiColorCodes.bright
			)
			await this.supressLoggerLevel(
				"      ‚ñë                                 ",
				ansiColorCodes.bright
			)
		} catch (error) {
			this.write(`${error}`, ansiColorCodes.red)
		}
	}

	public async onStartup(): Promise<void> {
		await this.logo()
		this.newLine()
	}

	// async updateProgress(max: number, loaded: number) {
	// 	this.totalParameters = max
	// 	this.loadedParameters = loaded
	// 	const progressPercent = (this.loadedParameters / this.totalParameters) * 100
	// 	await this.writeAsync(`Loading progress: ${progressPercent.toFixed(2)}%`)
	// 	await new Promise((resolve) => setTimeout(resolve, 10))
	// }

  updateProgress(max: number, loaded: number) {
    this.totalParameters = max;
    this.loadedParameters = loaded;
    const progressPercent = (this.loadedParameters / this.totalParameters) * 100;

    // Efface la ligne actuelle et positionne le curseur au d√©but
    process.stdout.clearLine(0);
    process.stdout.cursorTo(0);

    process.stdout.write(`Loading progress: ${progressPercent.toFixed(2)}%`);

    // Si tu souhaites passer √† la ligne une fois le chargement termin√©
    if (loaded >= max) {
        process.stdout.write('\n');
    }
}
}

export default Logger
