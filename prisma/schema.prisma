// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  password       String
  pseudo         String?     @unique
  email          String
  is_verified    Boolean     @default(false)
  tag            String?
  firstname      String
  lastname       String
  birthdate      DateTime
  secretQuestion String?
  login_at       DateTime?
  logout_at      DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime?   @updatedAt
  deleted_at     DateTime?
  ip             String
  is_banned      Boolean     @default(false)
  role           Int         @default(1)
  tagNumber      Int?        @unique
  characters     character[]
}

model character {
  id            Int             @id @default(autoincrement())
  breed_id      Int
  breed         breed           @relation(fields: [breed_id], references: [id])
  sex           Boolean
  cosmeticId    Int
  name          String
  colors        String
  look          String?
  experience    BigInt          @default(0)
  stats         Json?
  jobs          Json?
  mapId         String?
  cellId        String?
  direction     Int             @default(1)
  kamas         Int             @default(0)
  statsPoints   Int             @default(0)
  shortcuts     Json?
  spells        Json?
  finishMoves   Json?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  deleted_at    DateTime?
  user          user            @relation(fields: [userId], references: [id])
  userId        Int
  guild         guild?          @relation(fields: [guildId], references: [id])
  guildId       Int?
  characterItem characterItem[]
}

model guild {
  id         Int         @id @default(autoincrement())
  name       String
  level      Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  characters character[]
}

model world {
  id                  Int       @id @default(autoincrement())
  name                String
  port                Int
  address             String
  requireSubscription Boolean   @default(false)
  completion          Int
  serverSelectable    Boolean   @default(false)
  charCapacity        Int
  charsCount          Int
  requiredRole        Int
  status              Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
}

model breed {
  id                Int         @id
  name              String
  maleLook          String
  femaleLook        String
  maleColors        String
  femaleColors      String
  spForIntelligence String
  spForAgility      String
  spForStrength     String
  spForVitality     String
  spforWisdom       String
  spForChance       String
  startLifePoints   Int
  breedSpellsId     String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  deleted_at        DateTime?
  character         character[]
  head              head[]
}

model dungeon {
  id                 Int    @id
  name               String
  optimalPlayerLevel Int
  mapId              String
  entranceMapId      BigInt
  exitMapId          BigInt
}

model experience {
  id                  Int    @id @default(autoincrement())
  level               BigInt @unique
  characterExperience BigInt
  jobExperience       BigInt
  guildExperience     BigInt
  mountExperience     BigInt @default(0)
}

model skill {
  id                    Int    @id @default(autoincrement())
  name                  String
  parentJobId           Int
  gatheredRessourceItem Int
  interactiveId         Int
  levelMin              Int
}

model spell {
  id          Int      @id
  name        String   @db.Text
  description String   @db.Text
  spellLevels String   @db.Text
  verbose     Boolean?
}

model spellLevel {
  id               Int     @id
  spellId          Int
  spellBreed       Int
  grade            Int
  minPlayerLevel   Int
  apCost           Int
  minRange         Int
  maxRange         Int
  castInLine       Boolean
  castInDiag       Boolean
  castTestLos      Boolean
  criticalHitProb  Int
  needFreeCell     Boolean
  needTakenCell    Boolean
  needFreeTrapCell Boolean
  maxStack         Int
  maxCastPerTurn   Int
  maxCastPerTarget Int
  minCastInterval  Int
  initialCooldown  Int
  globalCooldown   Int
  hideEffects      Boolean
  hidden           Boolean
  effects          Json
  criticalEffects  Json
}

model spellVariant {
  id       Int    @id
  breedId  Int
  spellIds String
}

model head {
  id         Int       @id @default(autoincrement())
  skins      String
  assetId    String
  breedId    Int       @map("breed")
  breed      breed     @relation(fields: [breedId], references: [id])
  gender     Boolean   @default(true)
  label      String
  order      Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model finishMove {
  id         Int     @id
  duration   Int
  free       Boolean
  name       String
  category   Int
  spellLevel Int
}

model item {
  id             Int     @id
  name           String  @db.Text
  typeId         Int
  level          Int
  realWeight     Int
  cursed         Boolean
  usable         Boolean
  exchangeable   Boolean
  price          Int
  etheral        Boolean
  itemSetId      Int
  criteria       String
  appearanceId   Int
  dropMonsterIds Json
  recipeSlots    Int
  recipeIds      Json
  effects        Json
  craftXpRatio   Int
  isSaleable     Boolean
  look           String? @db.Text
}

model weapon {
  id               Int     @id
  name             String  @db.Text
  typeId           Int
  level            Int
  realWeight       Int
  cursed           Boolean
  usable           Boolean
  exchangeable     Boolean
  price            Int
  etheral          Boolean
  itemSetId        Int
  criteria         String
  appearanceId     Int
  dropMonsterIds   Json
  recipeSlots      Int
  recipeIds        Json
  effects          Json
  craftXpRatio     Int
  isSaleable       Boolean
  apCost           Int
  minRange         Int
  maxRange         Int
  maxCastPerTurn   Int
  castInLine       Boolean
  castInDiag       Boolean
  castTestLos      Boolean
  criticalHitProb  Int
  criticalHitBonus Int
}

model itemSet {
  id            Int     @id
  name          String  @db.Text
  items         Json
  effects       Json
  bonusIsSecret Boolean
}

model characterItem {
  characterId           Int
  character             character              @relation(fields: [characterId], references: [id], onDelete: Cascade)
  uid                   String                 @id @default(uuid())
  gid                   Int
  position              Int
  quantity              Int
  effects               Json                   @default("[]")
  appearanceId          Int
  look                  String?                @db.Text
  characterItemIdMapper characterItemIdMapper?
}

model characterItemIdMapper {
  intId         Int           @id @default(autoincrement())
  uuid          String        @unique
  characterItem characterItem @relation(fields: [uuid], references: [uid], onDelete: Cascade)

  @@index([uuid], name: "idx_uuid")
}

model interactiveSkill {
  id               Int    @id
  mapId            Int
  identifier       Int
  actionIdentifier String
  type             String
  skillId          String
  param1           String
  param2           String
  param3           String
  criteria         String
}

model subArea {
  id                  Int    @id
  name                String @db.Text
  areaId              Int
  level               Int
  monsterIds          String @db.Text
  questsIds           String @db.Text
  npcIds              String @db.Text
  associatedZaapMapId Int
}

model monsterSpawn {
  id          Int @id
  monsterId   Int
  subAreaId   Int
  probability Int
}

model interactiveElement {
  id          Int @id
  elementId   Int
  mapId       Int
  cellId      Int
  elementType Int
  gfxId       Int
  bonesId     Int
}

model map {
  id                Int  @id
  subAreaId         Int
  version           Int
  leftNeighbourId   Int
  rightNeighbourId  Int
  topNeighbourId    Int
  bottomNeighbourId Int
  cells             Json
  elements          Json
}

model mapScrollAction {
  id          Int @id
  rightMapId  Int
  leftMapId   Int
  topMapId    Int
  bottomMapId Int
}