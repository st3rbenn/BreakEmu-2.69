// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int         @id @default(autoincrement())
  username       String      @unique
  password       String
  pseudo         String?     @unique
  email          String
  is_verified    Boolean     @default(false)
  tag            String?
  firstname      String
  lastname       String
  birthdate      DateTime
  secretQuestion String?
  login_at       DateTime?
  logout_at      DateTime?
  created_at     DateTime    @default(now())
  updated_at     DateTime?   @updatedAt
  deleted_at     DateTime?
  ip             String
  is_banned      Boolean     @default(false)
  role           Int         @default(1)
  tagNumber      Int?        @unique
  characters     character[]
}

model character {
  id          Int       @id @default(autoincrement())
  breed_id    Int
  breed       breed     @relation(fields: [breed_id], references: [id])
  sex         Boolean
  cosmeticId  Int
  name        String
  colors      String
  look        String?
  experience  BigInt    @default(0)
  stats       Json?
  jobs        Json?
  mapId       String?
  cellId      String?
  direction   Int       @default(1)
  kamas       Int       @default(0)
  statsPoints Int       @default(0)
  shortcuts   Json?
  spells      Json?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?
  user        user      @relation(fields: [userId], references: [id])
  userId      Int
  guild       guild?    @relation(fields: [guildId], references: [id])
  guildId     Int?
}

model guild {
  id         Int         @id @default(autoincrement())
  name       String
  level      Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  characters character[]
}

model world {
  id                  Int       @id @default(autoincrement())
  name                String
  port                Int
  address             String
  requireSubscription Boolean   @default(false)
  completion          Int
  serverSelectable    Boolean   @default(false)
  charCapacity        Int
  charsCount          Int
  requiredRole        Int
  status              Int
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
}

model breed {
  id                Int         @id
  name              String
  maleLook          String
  femaleLook        String
  maleColors        String
  femaleColors      String
  spForIntelligence String
  spForAgility      String
  spForStrength     String
  spForVitality     String
  spforWisdom       String
  spForChance       String
  startLifePoints   Int
  breedSpellsId     String?
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  deleted_at        DateTime?
  character         character[]
  head              head[]
}

model dungeon {
  id                 Int    @id
  name               String
  optimalPlayerLevel Int
  mapId              String
  entranceMapId      BigInt
  exitMapId          BigInt
}

model experience {
  id                  Int    @id @default(autoincrement())
  level               BigInt @unique
  characterExperience BigInt
  jobExperience       BigInt
  guildExperience     BigInt
  mountExperience     BigInt @default(0)
}

model skill {
  id                    Int    @id @default(autoincrement())
  name                  String
  parentJobId           Int
  gatheredRessourceItem Int
  interactiveId         Int
  levelMin              Int
}

model spell {
  id          Int     @id
  name        String  @db.Text
  description String  @db.Text
  spellLevels String  @db.Text
  verbose     Boolean?
}

model spellLevel {
  id               Int     @id
  spellId          Int
  spellBreed       Int
  grade            Int
  minPlayerLevel   Int
  apCost           Int
  minRange         Int
  maxRange         Int
  castInLine       Boolean
  castInDiag       Boolean
  castTestLos      Boolean
  criticalHitProb  Int
  needFreeCell     Boolean
  needTakenCell    Boolean
  needFreeTrapCell Boolean
  maxStack         Int
  maxCastPerTurn   Int
  maxCastPerTarget Int
  minCastInterval  Int
  initialCooldown  Int
  globalCooldown   Int
  hideEffects      Boolean
  hidden           Boolean
  effects          Json
  criticalEffects  Json
}

model spellVariant {
  id       Int    @id
  breedId  Int
  spellIds String
}

model head {
  id         Int       @id @default(autoincrement())
  skins      String
  assetId    String
  breedId    Int       @map("breed")
  breed      breed     @relation(fields: [breedId], references: [id])
  gender     Boolean   @default(true)
  label      String
  order      Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}
